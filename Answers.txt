B) Building an infix notation calculator on top of RPN requires string manipulation. The user will enter the expression in the infix notation. However, before the string can be passed onto the RPN, a string parsing operation has to be performed using BODMAS. Moving left to right, the string will be searched for brackets. In case of nested brackets, '(' and ')' will be searched for. Subsequent numbers within the first opening and closing parentheses will be positioned first in the list and the operand between the numbers placed immediately afterwards. The string will be traversed in this fashion where first priority will be given to brackets going left to right. Likewise, using the term 'BODMAS' to guide us as we learnt back in basic arithmetics back in school,  the next priority will be given to power or root operations. Then the ones undergoing multiplication or division where the two numbers in question will be put in the list with the operation immediately after the second one. Finally, the string will be searched foor addition and subtraction and the respective numbers placed in the string. This fully parsed string will then be passed onto the RPN calculator. 
 
C) Dash - a Python based framework would allow us to quickly design a layout. Its callbacks allow for parsing user input easily and passing it onto the backend for the calculations. Dash which is based off of flask can be conveniently deployed using Heroku. Heroku makes for an excellent choice for deployment of applications just as long as the task is computationally inexpensive. Heroku's free deployment is extremely limited and applications which deal in big-data would fail. One of my applications deployed on Heroku failed to run as the backend was too heavy and required more than the provided 500MB of ram. The deployment was then shifted to GCP. GCP's requirement to containerise the application can be challenging at times but GCP provides comparatively greater computer resources in the free version. 
